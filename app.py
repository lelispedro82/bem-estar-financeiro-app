import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import cm
import re, unicodedata

# ==========================================================
# 1. Configura√ß√£o inicial
# ==========================================================
st.set_page_config(page_title="Alfabetiza√ß√£o, Vieses e Bem-Estar Financeiro", page_icon="üí∞")

st.title("üí∞ Autoavalia√ß√£o de Alfabetiza√ß√£o Financeira, Vieses e Bem-Estar (CFPB)")
st.markdown("""
Responda √†s se√ß√µes abaixo. **Todos os scores s√£o somas simples** dos itens.
- **Alfabetiza√ß√£o Financeira** = **Comportamento** + **Atitude** + **Conhecimento**  
- **Vieses** exibidos **separadamente**: **Autocontrole** e **Contabilidade mental**  
- **Bem-Estar (CFPB)** convertido para **0‚Äì100** a partir da soma (0‚Äì40)  
""")

# ==========================================================
# 2. Leitura da base de refer√™ncia (opcional)
# ==========================================================
try:
    dados = pd.read_excel("base_com_scores.xlsx", sheet_name=0)
    dados = dados.loc[:, ~dados.columns.duplicated()].copy()
    dados.columns = dados.columns.str.lower().str.strip().str.replace(" ", "_")

    resumo = dados.copy()
    resumo.rename(columns={
        "faixa_idade": "idade",
        "score_bem_estar_cfpb": "score_bem_estar_cfpb"
    }, inplace=True)

    for col in [
        "score_bem_estar", "score_bem_estar_cfpb", "score_conhecimento",
        "score_comport_total", "score_atitude_total",
        "score_autocontrole_total", "score_contab_total",
        "score_alfabetizacao_total"
    ]:
        if col not in resumo.columns:
            resumo[col] = np.nan

    st.success("‚úÖ Base de refer√™ncia carregada com sucesso!")
except Exception as e:
    st.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel carregar 'base_com_scores.xlsx'. O app funcionar√° localmente.\n\nDetalhes: {e}")
    resumo = pd.DataFrame(columns=[
        "idade", "genero", "renda",
        "score_bem_estar", "score_bem_estar_cfpb", "score_conhecimento",
        "score_comport_total", "score_atitude_total",
        "score_autocontrole_total", "score_contab_total",
        "score_alfabetizacao_total"
    ])

# ==========================================================
# 3. Se√ß√£o inicial qualitativa + Perfil
# ==========================================================
st.header("üìä Se√ß√£o Inicial ‚Äî Autoavalia√ß√£o")

q_ini1 = st.radio(
    "Voc√™ se considera capaz de entender informa√ß√µes sobre produtos financeiros, como empr√©stimos ou investimentos?",
    ["Sim", "N√£o", "Tenho d√∫vidas"], horizontal=True
)
q_ini2 = st.radio(
    "Com que frequ√™ncia voc√™ busca informa√ß√µes ou tira d√∫vidas sobre finan√ßas pessoais?",
    ["Sempre", "Frequentemente", "√Äs vezes", "Raramente", "Nunca"], horizontal=True
)
q_ini3 = st.text_area(
    "Que tipo de orienta√ß√£o financeira voc√™ gostaria de receber da cooperativa?",
    placeholder="Descreva livremente..."
)

st.header("üë§ Seu perfil")
idade = st.selectbox("1. Qual √© a sua idade (faixa et√°ria) ?", [
    "18 a 28 anos", "29 a 39 anos", "40 a 50 anos", "61 ou mais"
])
genero = st.selectbox("2. Indique o g√™nero (sexo) no qual voc√™ se identifica:", ["Masculino", "Feminino", "Prefiro n√£o responder"])
estado_civil = st.selectbox("3. Qual √© o seu estado civil?", ["Solteiro(a)", "Casado(a)/Uni√£o est√°vel", "Divorciado(a)", "Vi√∫vo(a)", "Prefiro n√£o responder"])
dependentes = st.selectbox("4. Possui dependentes?", ["N√£o", "Sim, 1", "Sim, 2", "Sim, 3 ou mais", "Prefiro n√£o responder"])
escolaridade = st.selectbox("5. Qual √© o seu n√≠vel de escolaridade?", [
    "Fundamental", "M√©dio", "Superior", "P√≥s-gradua√ß√£o", "Prefiro n√£o responder"
])
renda = st.selectbox("6.  Qual √© a sua renda mensal individual, considerando todos os seus trabalhos e outras fontes de rendimento?", [
    "At√© 2 sal√°rios m√≠nimos",
    "De 2 a 5 sal√°rios m√≠nimos",
    "De 5 a 10 sal√°rios m√≠nimos",
    "Mais de 10 sal√°rios m√≠nimos",
    "Prefiro n√£o responder"
])

# ==========================================================
# 4. Escalas (Likert)
# ==========================================================
escala_concord = [
    "Concordo totalmente (4)",
    "Concordo (3)",
    "Nem concordo nem discordo (2)",
    "Discordo (1)",
    "Discordo totalmente (0)"
]
mapa_concord = {
    "Concordo totalmente (4)": 4,
    "Concordo (3)": 3,
    "Nem concordo nem discordo (2)": 2,
    "Discordo (1)": 1,
    "Discordo totalmente (0)": 0
}

escala_freq = ["Sempre (4)", "Quase sempre (3)", "√Äs vezes (2)", "Raramente (1)", "Nunca (0)"]
mapa_freq = {
    "Sempre (4)": 4,
    "Quase sempre (3)": 3,
    "√Äs vezes (2)": 2,
    "Raramente (1)": 1,
    "Nunca (0)": 0
}

escala_1 = ["Completamente (4)", "Muito bem (3)", "Um pouco (2)", "Muito pouco (1)", "De modo nenhum (0)"]
escala_2 = ["Sempre (4)", "Frequentemente (3)", "√Äs vezes (2)", "Raramente (1)", "Nunca (0)"]
mapa_escala_1 = {"Completamente (4)": 4, "Muito bem (3)": 3, "Um pouco (2)": 2, "Muito pouco (1)": 1, "De modo nenhum (0)": 0}
mapa_escala_2 = {"Sempre (4)": 4, "Frequentemente (3)": 3, "√Äs vezes (2)": 2, "Raramente (1)": 1, "Nunca (0)": 0}

# ==========================================================
# 5. Formul√°rio ‚Äî Bem-estar (CFPB) Q07‚ÄìQ16 (textos originais)
# ==========================================================
st.header("üìã Se√ß√£o: Bem-Estar Financeiro (CFPB) ‚Äî Q07‚ÄìQ16")
perguntas_bem = {
    "BEM_Q07": "07. Voc√™ poderia lidar com uma grande despesa inesperada.",
    "BEM_Q08": "08. Voc√™ est√° garantindo seu futuro financeiro.",
    "BEM_Q09": "09. Por causa da sua situa√ß√£o financeira, voc√™ sente que nunca ter√° as coisas que quer na vida.",
    "BEM_Q10": "10. Voc√™ pode aproveitar a vida devido √† maneira como est√° administrando seu dinheiro.",
    "BEM_Q11": "11. Voc√™ est√° apenas sobrevivendo financeiramente.",
    "BEM_Q12": "12. Voc√™ est√° preocupado(a) que o dinheiro que tem ou ter√° economizado pode n√£o ser suficiente.",
    "BEM_Q13": "13. Dar um presente de casamento, anivers√°rio ou outra ocasi√£o colocaria em dificuldade suas finan√ßas do m√™s.",
    "BEM_Q14": "14. Voc√™ tem dinheiro sobrando no final do m√™s.",
    "BEM_Q15": "15. Voc√™ N√ÉO est√° em dia com as suas finan√ßas.",
    "BEM_Q16": "16. Suas finan√ßas controlam sua vida."
}
respostas_bem = {}
for cod, texto in perguntas_bem.items():
    if int(cod[-2:]) <= 12:
        respostas_bem[cod] = st.radio(texto, escala_1, horizontal=True, index=2, key=cod)
    else:
        respostas_bem[cod] = st.radio(texto, escala_2, horizontal=True, index=2, key=cod)

# ==========================================================
# 6. Formul√°rio ‚Äî Autocontrole (Q17‚ÄìQ20) (textos originais)
# ==========================================================
st.header("üß≠ Se√ß√£o: Autocontrole (Q17‚ÄìQ20)")
perguntas_vies = {
    "VIE_Q17": "17. Considero cuidadosamente as consequ√™ncias das minhas decis√µes de compras antes de gastar.",
    "VIE_Q18": "18. Consigo seguir metas financeiras em longo prazo.",
    "VIE_Q19": "19. Consigo resistir a tenta√ß√µes para alcan√ßar meus objetivos or√ßament√°rios.",
    "VIE_Q20": "20. Eu sei quando ‚Äúdizer chega‚Äù em rela√ß√£o aos meus gastos."
}
respostas_vies = {}
for cod, texto in perguntas_vies.items():
    respostas_vies[cod] = st.radio(texto, escala_concord, horizontal=True, index=2, key=cod)

# ==========================================================
# 7. Formul√°rio ‚Äî Contabilidade mental (Q21‚ÄìQ25) (textos originais)
# ==========================================================
st.header("üí° Se√ß√£o: Contabilidade mental (Q21‚ÄìQ25)")
perguntas_contab = {
    "CON_Q21": "21.  √â importante para mim acompanhar minhas movimenta√ß√µes financeiras com precis√£o.",
    "CON_Q22": "22.  Eu costumo registrar meus ganhos e despesas, seja anotando em caderno, planilha, aplicativo ou de qualquer outra forma.",
    "CON_Q23": "23. Eu saberia dizer, pelo menos aproximadamente, quanto gastei neste m√™s.",
    "CON_Q24": "24.  Eu separo meus gastos em diferentes categorias (como, por exemplo, alimenta√ß√£o, lazer, educa√ß√£o etc.).",
    "CON_Q25": "25.  De modo geral, sou uma pessoa bem-organizada com rela√ß√£o ao meu dinheiro."
}
respostas_contab = {}
for cod, texto in perguntas_contab.items():
    respostas_contab[cod] = st.radio(texto, escala_concord, horizontal=True, index=2, key=cod)

# ==========================================================
# 8. Formul√°rio ‚Äî Comportamento financeiro (Q26‚ÄìQ34) (textos originais)
# ==========================================================
st.header("üìà Se√ß√£o: Comportamento financeiro (Q26‚ÄìQ34)")
perguntas_comport = {
    "COM_Q26": "26. Voc√™ anota e controla os seus gastos pessoais (ex.: planilha de receitas e despesas mensais).",
    "COM_Q27": "27. Voc√™ compara pre√ßos ao fazer uma compra.",
    "COM_Q28": "28. Voc√™ tem um plano de gastos/or√ßamento.",
    "COM_Q29": "29. Voc√™ paga suas contas em dia.",
    "COM_Q30": "30. Voc√™ analisa suas contas antes de fazer uma compra de alto valor.",
    "COM_Q31": "31. Voc√™ passa a poupar mais quando recebe um aumento de sal√°rio.",
    "COM_Q32": "32. Voc√™ faz uma reserva do dinheiro que recebe mensalmente para uma necessidade futura.",
    "COM_Q33": "33. Voc√™ guarda parte da sua renda todo o m√™s.",
    "COM_Q34": "34. Voc√™ guarda dinheiro regularmente para atingir objetivos financeiros de longo prazo como, por exemplo, educa√ß√£o dos seus filhos, aquisi√ß√£o de uma casa, aposentadoria."
}
respostas_comport = {}
for cod, texto in perguntas_comport.items():
    respostas_comport[cod] = st.radio(texto, escala_freq, horizontal=True, index=2, key=cod)

# ==========================================================
# 9. Formul√°rio ‚Äî Atitude financeira (Q35‚ÄìQ42) (textos originais)
# ==========================================================
st.header("üéØ Se√ß√£o: Atitude financeira (Q35‚ÄìQ42)")
perguntas_ati = {
    "ATI_Q35": "35. Para voc√™ √© importante definir metas para o futuro.",
    "ATI_Q36": "36. Voc√™ acredita que a maneira como administra o seu dinheiro vai afetar o seu futuro.",
    "ATI_Q37": "37. Voc√™ n√£o se preocupa com o futuro, vive apenas o presente.",
    "ATI_Q38": "38. Poupar √© imposs√≠vel para mim.",
    "ATI_Q39": "39. Depois de tomar uma decis√£o sobre dinheiro, voc√™ se preocupa muito com a sua decis√£o.",
    "ATI_Q40": "40.  √â dif√≠cil para mim construir um planejamento de gastos.",
    "ATI_Q41": "41. Voc√™ considera mais satisfat√≥rio gastar dinheiro do que poupar para o futuro.",
    "ATI_Q42": "42. Para voc√™ o dinheiro √© feito para gastar."
}
respostas_ati = {}
for cod, texto in perguntas_ati.items():
    respostas_ati[cod] = st.radio(texto, escala_concord, horizontal=True, index=2, key=cod)

# ==========================================================
# 10. Formul√°rio ‚Äî Conhecimento financeiro (Q43‚ÄìQ50) (textos originais)
# ==========================================================
st.header("üß† Se√ß√£o: Conhecimento Financeiro (Q43‚ÄìQ50)")
perguntas_conhecimento = {
    "Q43": {
        "texto": "43. Suponha que voc√™ tenha R$ 100,00 em uma conta poupan√ßa a uma taxa de juros composto de 10% ao ano. Depois de 5 anos, qual o valor voc√™ ter√° na poupan√ßa? Considere que n√£o tenha sido depositado nem retirado dinheiro.",
        "opcoes": ["Exatamente R$ 150,00", "Mais do que R$ 150,00", "Menos do que R$ 150,00", "N√£o sei"]
    },
    "Q44": {
        "texto": "44. Suponha que em 2027 sua renda dobrar√° e os pre√ßos de todos os bens tamb√©m dobrar√£o. Em 2027, o quanto voc√™ ser√° capaz de comprar com a sua renda?",
        "opcoes": ["Mais do que hoje", "O mesmo que hoje", "Menos do que hoje", "N√£o sei"]
    },
    "Q45": {
        "texto": "45.Considerando-se um longo per√≠odo (ex.: 10 anos), qual ativo, normalmente, oferece maior retorno?",
        "opcoes": ["Poupan√ßa", "T√≠tulos p√∫blicos", "A√ß√µes", "N√£o sei"]
    },
    "Q46": {
        "texto": "46. Imagine que cinco amigos recebem uma doa√ß√£o de R$ 1.000,00 e precisam dividir o dinheiro igualmente entre eles. Quanto cada um vai ganhar?",
        "opcoes": ["R$ 100,00", "R$ 200,00", "R$ 300,00", "N√£o sei"]
    },
    "Q47": {
        "texto": "47. Um investimento com alta taxa de retorno ter√° alta taxa de risco. Essa afirma√ß√£o √©:",
        "opcoes": ["Verdadeira", "Falsa", "N√£o sei"]
    },
    "Q48": {
        "texto": "48. Um empr√©stimo com dura√ß√£o de 15 anos normalmente exige pagamentos mensais maiores do que um empr√©stimo de 30 anos, mas o total de juros pagos ao final do empr√©stimo ser√° menor. Essa afirma√ß√£o √©:",
        "opcoes": ["Verdadeira", "Falsa", "N√£o sei"]
    },
    "Q49": {
        "texto": "49. Suponha que voc√™ viu o mesmo televisor em duas lojas diferentes pelo pre√ßo inicial de R$ 1.000,00. A loja ‚ÄúA‚Äù oferece um desconto de R$ 150,00, enquanto a loja ‚ÄúB‚Äù oferece um desconto de 10%. Qual √© a melhor alternativa?",
        "opcoes": ["Comprar na loja A", "Comprar na loja B", "Tanto faz", "N√£o sei"]
    },
    "Q50": {
        "texto": "50. Suponha que voc√™ realizou um empr√©stimo de R$ 10.000,00 para ser pago ap√≥s um ano e o custo com os juros √© R$ 600,00. A taxa de juros que voc√™ ir√° pagar nesse empr√©stimo √© de:",
        "opcoes": ["0,6%", "6%", "60%", "N√£o sei"]
    }
}
respostas_conhecimento = {}
for cod, info in perguntas_conhecimento.items():
    respostas_conhecimento[cod] = st.radio(info["texto"], info["opcoes"], horizontal=False, key=cod)

# ==========================================================
# 11. Fun√ß√µes utilit√°rias (normaliza√ß√£o + gabarito R)
# ==========================================================
def norm_text_r(x):
    if pd.isna(x):
        return ""
    x = str(x).strip().lower()
    x = ''.join(c for c in unicodedata.normalize('NFD', x) if unicodedata.category(c) != 'Mn')
    x = re.sub(r'[[:punct:]]', '', x)
    x = re.sub(r'\s+', ' ', x)
    return x

def avaliar_conhecimento_r(resps):
    correct_patterns = {
        "Q43": lambda x: re.search(r"mais.*150", x) and not re.search(r"exatamente", x),
        "Q44": lambda x: re.search(r"exatamente|mesmo|igual", x),
        "Q45": lambda x: re.search(r"acao|acoes", x),
        "Q46": lambda x: re.search(r"\b200\b", x),
        "Q47": lambda x: re.search(r"verdade", x),
        "Q48": lambda x: re.search(r"verdade", x),
        "Q49": lambda x: re.search(r"loja ?a", x),
        "Q50": lambda x: ("6" in x or "0.06" in x or "0,06" in x) and ("0,6" not in x)
    }
    score = 0
    for q, val in resps.items():
        txt = norm_text_r(val)
        if q in correct_patterns and correct_patterns[q](txt):
            score += 1
    return score  # 0‚Äì8

# ==========================================================
# 12. Vari√°veis padr√£o (evita NameError)
# ==========================================================
score_comport_total = np.nan
score_atitude_total = np.nan
score_conhecimento = np.nan
score_alfabetizacao_total = np.nan
score_autocontrole_total = np.nan
score_contab_total = np.nan
score_bem_total = np.nan
score_cfpb = np.nan
nivel_af = nivel_vie = nivel_con = nivel_bem = ""
dica_af = dica_vie = dica_con = dica_bem = ""
cor_nivel = "#3498DB"

# ==========================================================
# 13. C√°lculo e exibi√ß√£o
# ==========================================================
if st.button("Calcular meus resultados"):
    # --- Comportamento (0‚Äì36) ‚Äî soma
    num_comport = {k: mapa_freq[v] for k, v in respostas_comport.items()}
    score_comport_total = int(np.sum(list(num_comport.values())))

    # --- Atitude (0‚Äì32) ‚Äî soma (inverter 37‚Äì42)
    num_ati = {k: mapa_concord[v] for k, v in respostas_ati.items()}
    for inv in [f"ATI_Q{i}" for i in range(37, 43)]:
        num_ati[inv] = 4 - num_ati[inv]
    score_atitude_total = int(np.sum(list(num_ati.values())))

    # --- Conhecimento (0‚Äì8) ‚Äî soma de acertos (regex R)
    score_conhecimento = int(avaliar_conhecimento_r(respostas_conhecimento))

    # --- Alfabetiza√ß√£o Financeira (0‚Äì76) ‚Äî soma
    score_alfabetizacao_total = int(score_comport_total + score_atitude_total + score_conhecimento)
    max_af = 36 + 32 + 8  # 76

    # --- Autocontrole (0‚Äì16) ‚Äî soma (sem invers√µes; maior = melhor autocontrole)
    num_vies = {k: mapa_concord[v] for k, v in respostas_vies.items()}
    score_autocontrole_total = int(np.sum(list(num_vies.values())))

    # --- Contabilidade mental (0‚Äì20) ‚Äî soma (sem invers√µes; maior = melhor organiza√ß√£o mental)
    num_contab = {k: mapa_concord[v] for k, v in respostas_contab.items()}
    score_contab_total = int(np.sum(list(num_contab.values())))

    # --- CFPB (0‚Äì40) e convers√£o (0‚Äì100) ‚Äî invers√µes padr√£o
    num_bem = {}
    for k, v in respostas_bem.items():
        if int(k[-2:]) <= 12:
            num_bem[k] = mapa_escala_1[v]
        else:
            num_bem[k] = mapa_escala_2[v]
    for inv in ["BEM_Q09", "BEM_Q11", "BEM_Q12", "BEM_Q13", "BEM_Q15", "BEM_Q16"]:
        num_bem[inv] = 4 - num_bem[inv]
    score_bem_total = int(np.sum(list(num_bem.values())))

    conv_tab = pd.DataFrame({
        "total": range(0, 41),
        "self_18_61": [
            14,19,22,25,27,29,31,32,34,35,
            37,38,40,41,42,44,45,46,47,49,
            50,51,52,54,55,56,58,59,60,62,
            63,65,66,68,69,71,73,75,78,81,86
        ],
        "self_62plus": [
            14,20,24,26,29,31,33,35,36,38,
            39,41,42,44,45,46,48,49,50,52,
            53,54,56,57,58,60,61,63,64,66,
            67,69,71,73,75,77,79,82,84,88,95
        ]
    })
    idade_grupo = "18-61" if "61" not in idade else "61+"
    col_ref = "self_18_61" if idade_grupo == "18-61" else "self_62plus"
    score_cfpb = float(np.interp(score_bem_total, conv_tab["total"], conv_tab[col_ref]))

    # --- Classifica√ß√£o por tercis
    def classificar(score, maximo):
        if score < (maximo/3):
            return "Baixo"
        elif score < (2*maximo/3):
            return "Moderado"
        else:
            return "Alto"

    nivel_af  = classificar(score_alfabetizacao_total, max_af)
    nivel_vie = classificar(score_autocontrole_total, 16)
    nivel_con = classificar(score_contab_total, 20)
    nivel_bem = classificar(score_bem_total, 40)

    # --- Dicas (maior soma = melhor; vieses separados)
    dica_af = {
        "Baixo": "Refine h√°bitos: or√ßamento, registro de gastos, metas SMART e estudo de juros/infla√ß√£o.",
        "Moderado": "Consolide poupan√ßa autom√°tica e revis√£o mensal; aprofunde no b√°sico de investimentos.",
        "Alto": "Mantenha disciplina e diversifica√ß√£o; educa√ß√£o continuada em investimentos."
    }[nivel_af]

    dica_vie = {
        "Baixo": "‚ö†Ô∏è Sinal de vi√©s de autocontrole: regra dos 2 dias, automatiza√ß√£o da poupan√ßa e listas de compra.",
        "Moderado": "üü° Bom, mas com lapsos: limites por categoria e metas semanais.",
        "Alto": "üü¢ √ìtimo autocontrole: preserve gatilhos positivos (d√©bitos autom√°ticos, metas mensais)."
    }[nivel_vie]

    dica_con = {
        "Baixo": "‚ö†Ô∏è Sinal de fragilidade na contabilidade mental: centralize vis√£o (planilha/app) e defina centros de custo.",
        "Moderado": "üü° Estrutura razo√°vel: envelopes digitais e revis√£o quinzenal.",
        "Alto": "üü¢ Boa organiza√ß√£o mental do dinheiro: mantenha regras de remanejamento e metas por categoria."
    }[nivel_con]

    dica_bem = {
        "Baixo": "‚ö†Ô∏è Priorize reserva de emerg√™ncia, redu√ß√£o de d√≠vidas e um planejamento mensal simples.",
        "Moderado": "üü° Ajuste fluxo de caixa, eleve poupan√ßa autom√°tica e revise seguros.",
        "Alto": "üü¢ Mantenha h√°bitos, metas de longo prazo e diversifique investimentos."
    }[nivel_bem]

    # --- M√©tricas principais
    st.subheader("üìä Resultados ‚Äî Somas dos Construtos")
    colA, colB, colC = st.columns(3)
    colA.metric("Comportamento (0‚Äì36)", f"{score_comport_total}")
    colB.metric("Atitude (0‚Äì32)", f"{score_atitude_total}")
    colC.metric("Conhecimento (0‚Äì8)", f"{score_conhecimento}")

    st.metric("Alfabetiza√ß√£o Financeira ‚Äî Soma (0‚Äì76)", f"{score_alfabetizacao_total}")
    st.info(f"N√≠vel AF: **{nivel_af}** ‚Äî {dica_af}")

    st.markdown("---")
    colD, colE = st.columns(2)
    with colD:
        st.metric("Autocontrole ‚Äî Soma (0‚Äì16)", f"{score_autocontrole_total}")
        st.info(f"N√≠vel Autocontrole: **{nivel_vie}** ‚Äî {dica_vie}")
    with colE:
        st.metric("Contabilidade mental ‚Äî Soma (0‚Äì20)", f"{score_contab_total}")
        st.info(f"N√≠vel Contab. mental: **{nivel_con}** ‚Äî {dica_con}")

    st.markdown("---")
    st.subheader("üßÆ Bem-Estar Financeiro (CFPB)")
    colF, colG = st.columns(2)
    with colF:
        st.metric("Soma CFPB (0‚Äì40)", f"{score_bem_total}")
    with colG:
        st.metric("Escala CFPB (0‚Äì100)", f"{score_cfpb:.0f}")
    st.info(f"N√≠vel Bem-Estar: **{nivel_bem}** ‚Äî {dica_bem}")

    # --- M√©dias de refer√™ncia
    if not resumo.empty:
        media_af   = resumo["score_alfabetizacao_total"].mean(skipna=True) if "score_alfabetizacao_total" in resumo.columns else np.nan
        media_bem  = resumo["score_bem_estar_cfpb"].mean(skipna=True)      if "score_bem_estar_cfpb" in resumo.columns else np.nan
        media_vie  = resumo["score_autocontrole_total"].mean(skipna=True)  if "score_autocontrole_total" in resumo.columns else np.nan
        media_con  = resumo["score_contab_total"].mean(skipna=True)        if "score_contab_total" in resumo.columns else np.nan
        media_com  = resumo["score_comport_total"].mean(skipna=True)       if "score_comport_total" in resumo.columns else np.nan
        media_ati  = resumo["score_atitude_total"].mean(skipna=True)       if "score_atitude_total" in resumo.columns else np.nan
        media_conh = resumo["score_conhecimento"].mean(skipna=True)        if "score_conhecimento" in resumo.columns else np.nan
    else:
        media_af = media_bem = media_vie = media_con = media_com = media_ati = media_conh = np.nan

    # --- Barras AF
    fig_af = go.Figure()
    fig_af.add_trace(go.Bar(x=["Voc√™"], y=[score_alfabetizacao_total], name="Voc√™"))
    if not np.isnan(media_af):
        fig_af.add_trace(go.Bar(x=["M√©dia"], y=[media_af], name="M√©dia", marker_color="gray"))
    fig_af.update_layout(title="Alfabetiza√ß√£o Financeira (Soma 0‚Äì76)", yaxis_title="Soma", barmode="group", height=380, template="plotly_white")
    st.plotly_chart(fig_af, use_container_width=True, key="grafico_af")

    # --- Barras Vieses separados
    colH, colI = st.columns(2)
    with colH:
        fig_vie = go.Figure()
        fig_vie.add_trace(go.Bar(x=["Voc√™"], y=[score_autocontrole_total], name="Voc√™"))
        if not np.isnan(media_vie):
            fig_vie.add_trace(go.Bar(x=["M√©dia"], y=[media_vie], name="M√©dia", marker_color="gray"))
        fig_vie.update_layout(title="Autocontrole (Soma 0‚Äì16)", yaxis_title="Soma", barmode="group", height=360, template="plotly_white")
        st.plotly_chart(fig_vie, use_container_width=True, key="grafico_vie")
    with colI:
        fig_con = go.Figure()
        fig_con.add_trace(go.Bar(x=["Voc√™"], y=[score_contab_total], name="Voc√™"))
        if not np.isnan(media_con):
            fig_con.add_trace(go.Bar(x=["M√©dia"], y=[media_con], name="M√©dia", marker_color="gray"))
        fig_con.update_layout(title="Contabilidade mental (Soma 0‚Äì20)", yaxis_title="Soma", barmode="group", height=360, template="plotly_white")
        st.plotly_chart(fig_con, use_container_width=True, key="grafico_con")

    # --- Barras CFPB
    fig_cfpb = go.Figure()
    fig_cfpb.add_trace(go.Bar(x=["Voc√™"], y=[score_cfpb], name="Voc√™"))
    if not np.isnan(media_bem):
        fig_cfpb.add_trace(go.Bar(x=["M√©dia"], y=[media_bem], name="M√©dia", marker_color="gray"))
    fig_cfpb.update_layout(title="Bem-Estar (CFPB 0‚Äì100)", yaxis_title="CFPB (0‚Äì100)", barmode="group", height=380, template="plotly_white")
    st.plotly_chart(fig_cfpb, use_container_width=True, key="grafico_cfpb")

    # --- Radar normalizado (visual)
    radar_labels = ["Comportamento", "Atitude", "Conhecimento", "Autocontrole", "Contab. mental", "Bem-Estar"]
    radar_vals   = [
        score_comport_total/36 if 36 else 0,
        score_atitude_total/32 if 32 else 0,
        score_conhecimento/8 if 8 else 0,
        score_autocontrole_total/16 if 16 else 0,
        score_contab_total/20 if 20 else 0,
        score_bem_total/40 if 40 else 0
    ]
    fig_radar = go.Figure()
    fig_radar.add_trace(go.Scatterpolar(
        r=radar_vals + [radar_vals[0]],
        theta=radar_labels + [radar_labels[0]],
        fill='toself',
        name="Voc√™"
    ))
    if not resumo.empty and all(c in resumo.columns for c in
        ["score_comport_total", "score_atitude_total", "score_conhecimento",
         "score_autocontrole_total", "score_contab_total", "score_bem_estar"]):
        medias_norm = [
            (resumo["score_comport_total"].mean(skipna=True) or 0) / 36,
            (resumo["score_atitude_total"].mean(skipna=True) or 0) / 32,
            (resumo["score_conhecimento"].mean(skipna=True) or 0) / 8,
            (resumo["score_autocontrole_total"].mean(skipna=True) or 0) / 16,
            (resumo["score_contab_total"].mean(skipna=True) or 0) / 20,
            (resumo["score_bem_estar"].mean(skipna=True) or 0) / 40
        ]
        fig_radar.add_trace(go.Scatterpolar(
            r=medias_norm + [medias_norm[0]],
            theta=radar_labels + [radar_labels[0]],
            fill='toself',
            name="M√©dia",
            line=dict(dash="dot")
        ))
    fig_radar.update_layout(
        polar=dict(radialaxis=dict(visible=True, range=[0, 1])),
        showlegend=True,
        title="Radar dos construtos (normalizado 0‚Äì1 apenas para visualiza√ß√£o)",
        template="plotly_white",
        height=520
    )
    st.plotly_chart(fig_radar, use_container_width=True, key="grafico_radar")

    # --- PDF
    def gerar_pdf():
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        story = []
        story.append(Paragraph("üí∞ Relat√≥rio: Alfabetiza√ß√£o, Vieses e Bem-Estar Financeiro", styles["Title"]))
        story.append(Spacer(1, 0.3 * cm))
        story.append(Paragraph(f"<b>Faixa et√°ria:</b> {idade}", styles["Normal"]))
        story.append(Paragraph(f"<b>G√™nero:</b> {genero}", styles["Normal"]))
        story.append(Paragraph(f"<b>Estado civil:</b> {estado_civil}", styles["Normal"]))
        story.append(Paragraph(f"<b>Dependentes:</b> {dependentes}", styles["Normal"]))
        story.append(Paragraph(f"<b>Escolaridade:</b> {escolaridade}", styles["Normal"]))
        story.append(Paragraph(f"<b>Renda:</b> {renda}", styles["Normal"]))
        story.append(Spacer(1, 0.4 * cm))

        story.append(Paragraph("<b>Alfabetiza√ß√£o Financeira</b>", styles["Heading3"]))
        story.append(Paragraph(f"- Comportamento (0‚Äì36): <b>{score_comport_total}</b>", styles["Normal"]))
        story.append(Paragraph(f"- Atitude (0‚Äì32): <b>{score_atitude_total}</b>", styles["Normal"]))
        story.append(Paragraph(f"- Conhecimento (0‚Äì8): <b>{score_conhecimento}</b>", styles["Normal"]))
        story.append(Paragraph(f"- <b>AF Total (0‚Äì76): {score_alfabetizacao_total}</b> ‚Äî N√≠vel: <b>{nivel_af}</b>", styles["Normal"]))
        story.append(Paragraph(f"Recomenda√ß√£o AF: {dica_af}", styles["Normal"]))
        story.append(Spacer(1, 0.3 * cm))

        story.append(Paragraph("<b>Vieses (maior soma = menor vi√©s)</b>", styles["Heading3"]))
        story.append(Paragraph(f"- Autocontrole (0‚Äì16): <b>{score_autocontrole_total}</b> ‚Äî N√≠vel: <b>{nivel_vie}</b>", styles["Normal"]))
        story.append(Paragraph(f"Recomenda√ß√£o Autocontrole: {dica_vie}", styles["Normal"]))
        story.append(Paragraph(f"- Contabilidade mental (0‚Äì20): <b>{score_contab_total}</b> ‚Äî N√≠vel: <b>{nivel_con}</b>", styles["Normal"]))
        story.append(Paragraph(f"Recomenda√ß√£o Contab. mental: {dica_con}", styles["Normal"]))
        story.append(Spacer(1, 0.3 * cm))

        story.append(Paragraph("<b>Bem-Estar (CFPB)</b>", styles["Heading3"]))
        story.append(Paragraph(f"- Soma (0‚Äì40): <b>{score_bem_total}</b>", styles["Normal"]))
        story.append(Paragraph(f"- Escala CFPB (0‚Äì100): <b>{score_cfpb:.0f}</b> ‚Äî N√≠vel: <b>{nivel_bem}</b>", styles["Normal"]))
        story.append(Paragraph(f"Recomenda√ß√£o Bem-Estar: {dica_bem}", styles["Normal"]))
        doc.build(story)
        buffer.seek(0)
        return buffer

    pdf_file = gerar_pdf()
    st.download_button(
        label="üìÑ Baixar Relat√≥rio em PDF",
        data=pdf_file,
        file_name="relatorio_alfabetizacao_vieses_bemestar.pdf",
        mime="application/pdf"
    )

    # --- Salvamento an√¥nimo
    nova_linha = pd.DataFrame([{
        "idade": idade,
        "genero": genero,
        "renda": renda,
        "score_comport_total": score_comport_total,
        "score_atitude_total": score_atitude_total,
        "score_conhecimento": score_conhecimento,
        "score_alfabetizacao_total": score_alfabetizacao_total,
        "score_autocontrole_total": score_autocontrole_total,
        "score_contab_total": score_contab_total,
        "score_bem_estar": score_bem_total,
        "score_bem_estar_cfpb": score_cfpb
    }])

    try:
        resumo = pd.concat([resumo, nova_linha], ignore_index=True)
        resumo.to_csv("dados_resumo.csv", index=False)
        st.success("‚úÖ Seus dados foram salvos anonimamente para futuras compara√ß√µes.")
    except Exception as e:
        st.error(f"‚ùå Erro ao salvar dados: {e}")
